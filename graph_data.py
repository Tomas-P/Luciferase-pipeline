from xml.etree import ElementTree as et
from pandas import read_csv
from numpy import ndarray
from matplotlib import pyplot

def choose_measurement():
    use_medians = input("Use the medians?").lower().startswith('y')
    if use_medians:
        pyplot.title('Medians over time, averaged into groups')
    else:
        pyplot.title("Averages over time, averaged into groups")

    return use_medians

def count_plants(csv):
    """Count the number of plants in each slide
by counting the number of rows in the csv file belonging
to the first slide."""
    for i in range(len(csv)):
        if csv.Slice[i] > 1:
            return i

def to_two_d(csv):
    """Take the data frame object generated by the .csv file,
and create a dictionary from it that aligns the data by which plant
is being refered to, and by time, such that the value of the return
at a number n corressponds to the measurements of plant n over time."""
    grid = {}
    for i in range(len(csv)):
        grid.setdefault(i % count_plants(csv),[]).append(csv.iloc[i])
    return grid

def to_grids(grid):
    '''This takes a dictionary of the sort created by to_two_d().
It produces two numpy arrays, one with the means of each plant over time,
and the other with the medians of each plant over time.'''
    mean_grid = ndarray((len(grid),len(grid[0])))
    median_grid = ndarray((len(grid),len(grid[0])))

    for i in grid:
        for j,data_pos in enumerate(grid[i]):
            mean_grid[i,j] = data_pos.Mean
            median_grid[i,j] = data_pos.Median

    # transposing the grids makes them line up with what pyplot expects
    # as the X or time axis and the Y or intensity axis.
    return mean_grid.T, median_grid.T


def extract_group(grid,lower_bound,upper_bound):
    return grid[...,lower_bound : upper_bound]

def reduce_group(group):
    return list(map(lambda timepoint : sum(timepoint) / len(timepoint), group))

def main():
    use_medians = choose_measurement()
    info = et.parse('info.xml')
    groups = et.parse('groups.xml')

    csvfilename = info.findtext('csv')
    dframe = read_csv(csvfilename)
    means,medians = to_grids(to_two_d(dframe))

    plant_groups = groups.findall('group')
    grids = []



    if use_medians:
        used_grid = medians
    else:
        used_grid = means

    for group in plant_groups:
        lower = int(group.findtext('lower'))
        higher = int(group.findtext('higher'))
        grid = extract_group(used_grid,lower,higher)
        grids.append(grid)

    reduced = map(reduce_group, grids)

    for i,group in enumerate(reduced):
        pyplot.plot(group,label="Group {}".format(i))

if __name__ == '__main__':
    main()
    pyplot.legend()
    pyplot.show()
