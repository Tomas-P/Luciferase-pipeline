# Rearrange the .csv from the ImageJ plugin to have the plants
# lined up with their past and future selfs

from tkinter.filedialog import askopenfilename
from pandas import read_csv
from numpy import ndarray

def get_csv_name():
    """Ask the user for the .csv file generated by the plugin.
The title parameter controls what the pop-up window is titled."""
    return askopenfilename(title="Select the csv file with the plant data")

def count_plants(csv):
    """Count the number of plants in each slide
by counting the number of rows in the csv file belonging
to the first slide."""
    for i in range(len(csv)):
        if csv.Slice[i] > 1:
            return i

def to_two_d(csv):
    """Take the data frame object generated by the .csv file,
and create a dictionary from it that aligns the data by which plant
is being refered to, and by time, such that the value of the return
at a number n corressponds to the measurements of plant n over time."""
    grid = {}
    for i in range(len(csv)):
        grid.setdefault(i % count_plants(csv),[]).append(csv.iloc[i])
    return grid

def to_grids(grid):
    '''This takes a dictionary of the sort created by to_two_d().
It produces two numpy arrays, one with the plant means,
and the other with the plant medians. The grids ar arrayed such that
the first axis (call it x) corresponds to which plant is being refered to,
and the second axis (call it y) corresponds to which slice/timepoint is referred to.'''
    mean_grid = ndarray((len(grid),len(grid[0])))
    median_grid = ndarray((len(grid),len(grid[0])))

    for i in grid:
        for j,data_pos in enumerate(grid[i]):
            mean_grid[i,j] = data_pos.Mean
            median_grid[i,j] = data_pos.Median

    return mean_grid, median_grid


# check to make sure everything works by running through it.
if __name__ == '__main__':
    name = get_csv_name()
    csv = read_csv(name)
    d2 = to_two_d(csv)
    means,medians = to_grids(d2)
